trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  outputDirectory: '$(Build.ArtifactStagingDirectory)/publish'
  runtimeIdentifier: 'win-x64' # Specify the runtime identifier here

steps:
# Step 1: Check out the repo
- checkout: self

# Step 2: Restore NuGet packages
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '**/*.sln'

# Step 3: Build and Publish the project as a standalone executable
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(outputDirectory) --runtime $(runtimeIdentifier) --self-contained true /p:PublishSingleFile=true'

# Optional: List build artifacts for verification
- script: |
    ls $(outputDirectory)
  displayName: 'List build artifacts'

# Step 4: Upload to FTP
- task: FtpUpload@2
  inputs:
    credentialsOption: 'inputs'
    serverUrl: 'ftp://$(FTP_HOST)'
    username: '$(FTP_USER)'
    password: '$(FTP_PASS)'
    rootDirectory: '$(outputDirectory)'
    remoteDirectory: '/home/$(FTP_USER)/ftp'
    clean: false
    cleanContents: false
    preservePaths: true
    trustSSL: false

# Optional: Clean up the directory after upload
- script: |
    rm -rf $(outputDirectory)
  displayName: 'Clean up published files'
